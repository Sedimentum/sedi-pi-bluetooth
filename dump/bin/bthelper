#!/bin/sh

set -e

HCICONFIG="$SNAP"/usr/bin/hciconfig
HCITOOL="$SNAP"/usr/bin/hcitool
BLUETOOTHCTL="$SNAP"/usr/bin/bluetoothctl
DT=/proc/device-tree

for dev in /sys/class/bluetooth/*; do
    dev="$(basename "$dev")"

    # Need to bring hci up before looking at MAC as it can be all zeros during init
    "$HCICONFIG" "$dev" up
    if ! "$HCICONFIG" "$dev" | grep -q "Bus: *UART"; then
        echo "$dev: Not a UART-attached Bluetooth modem"
        continue
    fi

    if "$HCITOOL" -i "$dev" dev | grep -q -E '\s43:4[35]:'; then
        SERIAL=$(cut -b9- "$DT"/serial-number)
        B1=$(echo "$SERIAL" | cut -b3-4)
        B2=$(echo "$SERIAL" | cut -b5-6)
        B3=$(echo "$SERIAL" | cut -b7-8)
        BDADDR=$( \
            printf '0x%02x 0x%02x 0x%02x 0xEB 0x27 0xB8' \
            $((0x$B3 ^ 0xAA)) $((0x$B2 ^ 0xAA)) $((0x$B1 ^ 0xAA)))

	echo "$dev: Setting MAC address"
        "$HCITOOL" -i "$dev" cmd 0x31 0x001 $BDADDR
        "$HCICONFIG" "$dev" reset
    fi

    # Route SCO packets to the HCI interface (enables HFP/HSP)
    echo "$dev: Routing SCO packets to HCI"
    "$HCITOOL" -i "$dev" cmd 0x3f 0x1c 0x01 0x02 0x00 0x01 0x01 >/dev/null || continue

    # Force reinitialisation to allow extra features such as Secure Simple Pairing
    # to be enabled, for currently unknown reasons. This requires bluetoothd to be
    # running, which it isn't yet. Use this kludge of forking off another shell
    # with a delay, pending a complete understanding of the issues.
    # XXX This is disabled for now as I can't get bluetoothctl running under the
    # pi-bluetooth snap (libreadline issue due to differing core bases, etc.)
    #(sleep 5; "$BLUETOOTHCTL" power off; "$BLUETOOTHCTL" power on) &

    break
done
